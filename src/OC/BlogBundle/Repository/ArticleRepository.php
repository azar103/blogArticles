<?php

namespace OC\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{



    public function myFind()
    {
    	$qb = $this->createQueryBuilder('a')
    	           ->where('a.author = :author')
    	           ->setParameter('author','eara');

        $qb->whereCurrentYear($qb);
        $qb->orderBy('a.date','DESC');    	
    	return $qb->getQuery()
    	          ->getResult();           

    }

    public function myFindAll()
    {
    	return  $this->createQueryBuilder('a')
    	            ->getQuery()
    	            ->getResult();
    }

    public function myFindOne($id)
    {
        $qb = $this->createQueryBuilder('a')
                   ->where('a.id = :id')
                   ->setParamaeter('id',$id)
                   ;

        
        return $qb->createQuery()
                   ->getResult();

    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
          $qb->andWhere('a.date between :begin and :end')
             ->setParameter('begin', new \DateTime('Y').'-01-01')
             ->setParameter('end', new \DateTime('Y').'12-31')
             ;
    }

    public function findByAuthorAndDate($author, $date)
    {
    	$qb = $this->createQueryBuilder('a')
    	           ->where('a.author = :author')
    	           ->setParameter('author',$author)
    	           ->andWhere('a.date = :date')
    	           ->setParameter('date',$date)
    	           ->orderBy('a.date','DESC');

    	return $qb->getQuery()
    	           ->getResult();           

    }
	public function getArticleWithCategories(array $categoryNames)
	{
       $qb = $this->createQueryBuilder('a')
                  ->innerJoin('a.categories','c')
                  ->addSelect('c')
                   ;

       $qb->where($qb->expr()->in('c.name',$categoryNames));
       return $qb->getQuery()
                  ->getResult();            
	}

  public function getArticles($page, $nbPerPages)
  {
    $query = $this->createQueryBuilder('a')
               ->leftJoin('a.image','i')
               ->addSelect('i')
               ->leftJoin('a.categories','cat')
               ->addSelect('cat')
               ->orderBy('a.date','DESC')
               ->getQuery()
               ;

    
    $query->setFirstResult(($page - 1)* $nbPerPages)
           ->setMaxResults($nbPerPages); 
    return new Paginator($query, true);        
  }


}
